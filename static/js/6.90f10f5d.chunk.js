(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{244:function(e,n,a){"use strict";a.r(n);var t=a(0),r=a.n(t),l=a(243),o=a(238),c=a(4),m=a(15),s=a(12),i=Object(t.lazy)(function(){return a.e(7).then(a.bind(null,241))}),u=function(){var e=Object(t.useState)(!1),n=Object(s.a)(e,2),a=n[0],l=n[1];return r.a.createElement(c.d,{justify:"center"},r.a.createElement(c.c,null,r.a.createElement(c.i,{onClick:function(){return l(!a)}},"Toggle SomeComp"),r.a.createElement(t.Suspense,{fallback:r.a.createElement(m.d,null)},a&&r.a.createElement(i,null))))};n.default=function(){return r.a.createElement(m.c,null,r.a.createElement(m.b,{name:"intro",heading:"Lazy & Suspense",withImage:!0},r.a.createElement(c.f,null,r.a.createElement(c.g,null,"ErrorBoundary gave us a way of catching an error below in the call tree"),r.a.createElement(c.g,null,"Suspense kinda does the same, however instead of catching an error, it catches a promise thrown by a component wrapped in lazy()"))),r.a.createElement(m.b,{name:"example",heading:"Example",withImage:!0},r.a.createElement(l.a,{language:"jsx",style:o.a},'const SomeComp = lazy(() => import("./SomeComp"))\n\n<App>\n    <Suspense fallback={<Spinner />}>\n        {this.props.showSomeComp && <SomeComp />}\n    </Suspense>\n</App>'),r.a.createElement(u,null)),r.a.createElement(m.b,{name:"summary",heading:"Lazy",withImage:!0},r.a.createElement(c.f,null,r.a.createElement(c.g,{customDot:"fire"},"Super easy code splitting"),r.a.createElement(c.g,{customDot:"fire"},"Step towards the ultimate goal of async rendering"),r.a.createElement(c.g,{customDot:"skull"},"Doesn't work with server side rendering"))))}}}]);
//# sourceMappingURL=6.90f10f5d.chunk.js.map